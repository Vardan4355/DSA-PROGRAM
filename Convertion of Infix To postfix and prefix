#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
int precedence(char op){
    switch(op){
        case '+':
        case '-':
        return 1;
        case '*':
        case '/':
        return 2;
        case '^':
        return 3;
        default :
        return -1;
    }
}
char* ConvertInfixToPostfix(char *exp){
    int size = strlen(exp),top =-1,index=0;
    char operator[size];
    char *str = (char*)malloc(size+1);
    for(int i=0; i<size; i++){
        char ch =exp[i];
        if(isdigit(ch) || isalpha(ch))
        str[index++] = ch;
        else if(ch =='+' || ch =='-' || ch =='/' || ch =='*' || ch =='^'){
            if(top==-1)
            operator[++top] = ch;
            else{
                while(top!=-1 && precedence(ch)<=precedence(operator[top])){
                    str[index++] = operator[top--];
                } 
                operator[++top]=ch;
            }
        }
        else if(ch=='(')
        operator[++top] =ch;
        else if(ch ==')'){
            while(operator[top] !='('){
                str[index++] = operator[top--];
            }
            top--;
        }
    }
    while(top!=-1){
        str[index++] = operator[top--];
    }
    str[index] = '\0';
    return str;
}
char* strrev(char *str){
    int size = strlen(str),i,j;
    char *temp = (char*)malloc(size+1);
    for(i=size-1, j=0; i>=0; i--, j++){
        temp[j]='\0';
        return temp;
    }
}
char* ConvertInfixToPrefix(char *exp){
    int size = strlen(exp),top =-1,index=0;
    char operator[size];
    char *str = (char*)malloc(size+1);
    for(int i=size-1; i>=0; i--){
        char ch =exp[i];
        if(isdigit(ch) || isalpha(ch))
        str[index++] = ch;
        else if(ch =='+' || ch =='-' || ch =='/' || ch =='*' || ch =='^'){
            if(top==-1)
            operator[++top] = ch;
            else{
                while(top!=-1 && precedence(ch)<=precedence(operator[top])){
                    str[index++] = operator[top--];
                } 
                operator[++top]=ch;
            }
        }
        else if(ch==')')
        operator[++top] =ch;
        else if(ch =='('){
            while(operator[top] !=')'){
                str[index++] = operator[top--];
            }
            top--;
        }
    }
    while(top!=-1){
        str[index++] = operator[top--];
    }
    str[index] = '\0';
    return strrev(str);
}
int main(){
     char exp[100];
     printf("Enter Infix Expression:");
     gets(exp);
     printf("Postfix form of Infix expression %s is %s\n",exp, ConvertInfixToPostfix(exp));
     printf("Prefix form of Infix expression %s is %s\n", exp, ConvertInfixToPrefix(exp));
    return 0;
}
